name: 'Deploy Single VM Stackstorm to AWS EC2'
description: 'Deploy a Single VM Stackstorm to an AWS Virtual Machine (EC2)'
branding:
  icon: upload-cloud
  color: red
inputs:
  checkout:
    description: 'Specifies if this action should checkout the code'
    required: false
    default: 'true'
  aws_access_key_id:
    description: 'AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: true
  aws_session_token:
    description: 'AWS session token'
    required: false
  aws_default_region:
    description: 'AWS default region'
    required: true
    default: 'us-east-1'
  tf_state_bucket:
    description: 'AWS S3 bucket to use for Terraform state. Defaults to `${org}-${repo}-{branch}-tf-state`'
    required: false
  tf_state_bucket_destroy:
    description: 'Force purge and deletion of S3 bucket defined. Any file contained there will be destroyed `stack_destroy` must also be `true`'
    required: false
    default: 'false'
  ec2_instance_profile:
    description: 'The AWS IAM instance profile to use for the EC2 instance'
  ec2_instance_type:
    description: 'The AWS EC2 instance type. Default is "t2.medium"'
  stack_destroy:
    description: 'Set to "true" to Destroy the stack'
  aws_resource_identifier:
    description: 'Set to override the AWS resource identifier for the deployment.  Defaults to `${org}-{repo}-{branch}`.  Use with destroy to destroy specific resources.'
  # domain_name:
  #   description: 'Define the root domain name for the application. e.g. app.com'
  #   required: true
  # create_domain:
  #   description: "Bool, whether the domain should be created in the action. Default is false"
  #   default: false
  # sub_domain:
  #   description: 'Define the sub-domain part of the URL. Defaults to `${org}-${repo}-{branch}`'
  # create_hosted_zone:
  #   description: "Bool, whether the hosted zone should be created in the action. Default is false"
  #   default: false
  aws_create_vpc:
    description: "Bool, whether an AWS VPC should be created in the action. Default is false"
    default: false
  infrastructure_only:
    description: "Bool, does infrastructure (i.e. terraform) but **not** the deployment (i.e. ansible) . Default is false"
    default: false


  # ST2 config
  st2_auth_username:
    description: Username used by StackStorm standalone authentication
    default: "testu"
  st2_auth_password:
    description: Password used by StackStorm standalone authentication
    default: "testp"
  st2_ansible_vars_file:
    description: Relative path from Project Root to Ansible vars file. If you'd like to adjust more advanced configuration; st2 version, st2.conf, RBAC, chatops, auth and more. See https://github.com/stackStorm/ansible-st2#variables for the full list of settings.
  st2_packs:
    description: String. Comma separated list of packs to install. This flag does not work with a --python3 only pack. (default `"st2"`). If you modify this option, be sure to also include `st2` in the list.
    default: "st2"

outputs:
  lb_url:
    description: "The URL of the generated app"
    value: ${{ steps.deploy.outputs.lb_url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout if required
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v3

    - name: Deploy with BitOps
      id: deploy
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        BITOPS_ENVIRONMENT: deployment
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
        AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
        TF_STATE_BUCKET: ${{ inputs.tf_state_bucket }}
        TF_STATE_BUCKET_DESTROY: ${{ inputs.tf_state_bucket_destroy }}

        APP_PORT: ${{ inputs.app_port }}
        EC2_INSTANCE_PROFILE: ${{ inputs.ec2_instance_profile }}
        EC2_INSTANCE_TYPE: ${{ inputs.ec2_instance_type }}
        STACK_DESTROY: ${{ inputs.stack_destroy }}
        AWS_RESOURCE_IDENTIFIER: ${{ inputs.aws_resource_identifier }}
        # DOMAIN_NAME: ${{ inputs.domain_name }}
        # CREATE_DOMAIN: ${{ inputs.CREATE_DOMAIN }}
        # SUB_DOMAIN: ${{ inputs.sub_domain }}
        # CREATE_HOSTED_ZONE: ${{ inputs.CREATE_HOSTED_ZONE }}

        CREATE_VPC: ${{ inputs.aws_create_vpc }}

        # Skip ansible deployment if deploying only infrastructure
        ANSIBLE_SKIP_DEPLOY: ${{ inputs.infrastructure_only }}

        BITOPS_FAST_FAIL: true

        # ST2 config
        ST2_AUTH_USERNAME: ${{ inputs.st2_auth_username }}
        ST2_AUTH_PASSWORD: ${{ inputs.st2_auth_password }}
        ST2_ANSIBLE_VARS_FILE: ${{ inputs.st2_ansible_vars_file }}
        ST2_PACKS: ${{ inputs.st2_packs }}
      run: |
        echo "running operations/_scripts/deploy/deploy.sh"
        $GITHUB_ACTION_PATH/operations/_scripts/deploy/deploy.sh

        echo "Setting up vars for GitHub"
        $GITHUB_ACTION_PATH/operations/_scripts/deploy/export_vars.sh

    # output results to GitHub
    - if: ${{ steps.deploy.outputs.lb_url != '' }}
      name: Print result created
      shell: bash
      run: |
        echo "## VM Created! :rocket:" >> $GITHUB_STEP_SUMMARY
        echo " ${{ steps.deploy.outputs.lb_url }}" >> $GITHUB_STEP_SUMMARY
    - if: ${{ steps.deploy.outputs.lb_url == '' }}
      name: Print result destroyed
      shell: bash
      run: |
        echo "## VM Destroyed! :boom:" >> $GITHUB_STEP_SUMMARY
        echo "Buckets and whole infrastructure should be gone now!" >> $GITHUB_STEP_SUMMARY
